{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samriti Raj\\\\OneDrive\\\\Desktop\\\\projects\\\\image-to-pdf\\\\src\\\\components\\\\ImageUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport PreviewPDF from \"./PreviewPDF\"; // Import PreviewPDF component\n\n// Function to resize image for preview display\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst resizeImage = (file, maxWidth = 550) => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    const reader = new FileReader();\n    reader.onload = e => {\n      img.onload = () => {\n        const canvas = document.createElement(\"canvas\");\n        const context = canvas.getContext(\"2d\");\n\n        // Calculate the scaling factor\n        const scaleFactor = Math.min(maxWidth / img.width, 1);\n        const width = img.width * scaleFactor;\n        const height = img.height * scaleFactor;\n        canvas.width = width;\n        canvas.height = height;\n\n        // Draw the image on the canvas with the new size\n        context.drawImage(img, 0, 0, width, height);\n\n        // Convert the canvas back to a Blob and then to an Object URL\n        canvas.toBlob(blob => {\n          resolve(URL.createObjectURL(blob)); // Returns the resized image URL\n        });\n      };\n      img.src = e.target.result;\n    };\n    reader.onerror = error => reject(error);\n    reader.readAsDataURL(file); // Load the image into the FileReader\n  });\n};\nconst ImageUploader = ({\n  images,\n  setImages\n}) => {\n  _s();\n  const [showPreview, setShowPreview] = useState(false); // State to toggle preview\n  const onDrop = async acceptedFiles => {\n    // Resize and create previews for each uploaded image\n    const resizedImages = await Promise.all(acceptedFiles.map(async file => {\n      const preview = await resizeImage(file, 550); // Resize the preview to a max width of 300px\n      return Object.assign(file, {\n        preview\n      });\n    }));\n\n    // Update the images state with the resized image previews\n    setImages(prevImages => [...prevImages, ...resizedImages]);\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    accept: \"image/jpeg, image/png\",\n    onDrop\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ...getRootProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag & Drop or Click to Upload Images (JPG, PNG)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowPreview(!showPreview),\n      children: showPreview ? \"Hide Preview\" : \"Show Preview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), showPreview && /*#__PURE__*/_jsxDEV(PreviewPDF, {\n      images: images\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageUploader, \"eIwGJkLVKP3Nj/YnIjbCqMSMM9w=\", false, function () {\n  return [useDropzone];\n});\n_c = ImageUploader;\nexport default ImageUploader;\nvar _c;\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"names":["React","useState","useDropzone","PreviewPDF","jsxDEV","_jsxDEV","resizeImage","file","maxWidth","Promise","resolve","reject","img","Image","reader","FileReader","onload","e","canvas","document","createElement","context","getContext","scaleFactor","Math","min","width","height","drawImage","toBlob","blob","URL","createObjectURL","src","target","result","onerror","error","readAsDataURL","ImageUploader","images","setImages","_s","showPreview","setShowPreview","onDrop","acceptedFiles","resizedImages","all","map","preview","Object","assign","prevImages","getRootProps","getInputProps","accept","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Samriti Raj/OneDrive/Desktop/projects/image-to-pdf/src/components/ImageUploader.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport PreviewPDF from \"./PreviewPDF\"; // Import PreviewPDF component\r\n\r\n// Function to resize image for preview display\r\nconst resizeImage = (file, maxWidth = 550) => {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image();\r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = (e) => {\r\n      img.onload = () => {\r\n        const canvas = document.createElement(\"canvas\");\r\n        const context = canvas.getContext(\"2d\");\r\n        \r\n        // Calculate the scaling factor\r\n        const scaleFactor = Math.min(maxWidth / img.width, 1);\r\n        const width = img.width * scaleFactor;\r\n        const height = img.height * scaleFactor;\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        // Draw the image on the canvas with the new size\r\n        context.drawImage(img, 0, 0, width, height);\r\n\r\n        // Convert the canvas back to a Blob and then to an Object URL\r\n        canvas.toBlob((blob) => {\r\n          resolve(URL.createObjectURL(blob)); // Returns the resized image URL\r\n        });\r\n      };\r\n\r\n      img.src = e.target.result;\r\n    };\r\n\r\n    reader.onerror = (error) => reject(error);\r\n    reader.readAsDataURL(file); // Load the image into the FileReader\r\n  });\r\n};\r\n\r\nconst ImageUploader = ({ images, setImages }) => {\r\n  const [showPreview, setShowPreview] = useState(false); // State to toggle preview\r\n  const onDrop = async (acceptedFiles) => {\r\n    // Resize and create previews for each uploaded image\r\n    const resizedImages = await Promise.all(\r\n      acceptedFiles.map(async (file) => {\r\n        const preview = await resizeImage(file, 550); // Resize the preview to a max width of 300px\r\n        return Object.assign(file, { preview });\r\n      })\r\n    );\r\n\r\n    // Update the images state with the resized image previews\r\n    setImages((prevImages) => [...prevImages, ...resizedImages]);\r\n  };\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    accept: \"image/jpeg, image/png\",\r\n    onDrop,\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div {...getRootProps()}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag & Drop or Click to Upload Images (JPG, PNG)</p>\r\n      </div>\r\n\r\n      {/* Button to toggle preview */}\r\n      {images.length > 0 && (\r\n        <button onClick={() => setShowPreview(!showPreview)}>\r\n          {showPreview ? \"Hide Preview\" : \"Show Preview\"}\r\n        </button>\r\n      )}\r\n\r\n      {/* Conditionally render the PreviewPDF component */}\r\n      {showPreview && <PreviewPDF images={images} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUploader;\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}